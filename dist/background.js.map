{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;;AAGA;AAAA;AAAA;AAEA;AACA;AACA;;AAGA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AACA;AAAA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAEA;;AAOA;AACA;;AAEA","sources":["webpack://tab-saver-extension/webpack/bootstrap","webpack://tab-saver-extension/webpack/runtime/make namespace object","webpack://tab-saver-extension/./src/background/background.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var tabDatafinal;\r\nvar countchanges  = 0;\r\nvar limit = 0;\r\n// background.js\r\n\r\n\r\n  chrome.tabs.query({ currentWindow: true }, function(tabs) {\r\n    \r\n    limit = 5;\r\n    console.log(\"before backend call\", limit);\r\n  });\r\n\r\n\r\n// Function to get all open tabs\r\nvar tabDatafinal = [];\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\n\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'setToken') {\r\n    console.log('Token received and stored in background.');\r\n    chrome.storage.local.set({ 'token69': request.token69 }, () => {\r\n      console.log('Token received and stored in background.');\r\n    });\r\n  }\r\n  if(request.action === 'removeToken'){\r\n    chrome.storage.local.remove(['token69'], () => {\r\n    console.log('authToken removed from local storage');\r\n    });\r\n  }\r\n\r\n  if(request.action === 'removesavedtabs'){\r\n    chrome.storage.local.remove(['laststore'], () => {\r\n    console.log('laststore removed from local storage');\r\n    });\r\n  }\r\n\r\n  if(request.action === 'deleteHistory'){\r\n    chrome.storage.local.remove(['laststore'], () => {\r\n    console.log('laststore removed from local storage');\r\n    });\r\n  }\r\n\r\n  if(request.action === 'addtabs'){\r\n    // chrome.storage.local.get(['laststore'], () => {\r\n    // console.log('laststore removed from local storage');\r\n    // });\r\n    chrome.storage.local.get(['laststore'], (result)=>{\r\n      if(result.laststore){\r\n        var lasttabs = JSON.parse(result.laststore);\r\n        var newtabs = request.newtabs\r\n        const uniqueTabs = newtabs.filter((newTab) => {\r\n          return !lasttabs.some(\r\n            (lastTab) => lastTab.tabid === newTab.tabid || lastTab.url === newTab.url\r\n          );\r\n        });\r\n  \r\n        // Combine the arrays\r\n        const updatedTabs = [...lasttabs, ...uniqueTabs];\r\n  \r\n        // Store the updated array back in local storage\r\n        chrome.storage.local.set({ laststore: JSON.stringify(updatedTabs) }, () => {\r\n          console.log('Unique tabs added to local storage:', updatedTabs);\r\n        });\r\n      }else{\r\n        var newtabs = request.newtabs\r\n        chrome.storage.local.set({ laststore: JSON.stringify(newtabs) }, () => {\r\n          console.log('Tabs updated in local storage:', newtabs);\r\n          });\r\n      }\r\n      \r\n    })\r\n\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nlet debounceTimer = null;\r\n\r\n\r\nfunction getAllTabs() {\r\n  console.log(countchanges);\r\n  //console.log(tabDatafinal);\r\n  countchanges = countchanges+1;\r\n  const today = new Date().toISOString();\r\n  //console.log(countchanges);\r\n  chrome.tabs.query({}, (tabs) => {\r\n    const tabData = tabs.map(tab => ({\r\n      url: tab.url,\r\n      title: tab.title,\r\n      tabid: tab.id,\r\n      favIconUrl: tab.favIconUrl,\r\n      type:1,\r\n      date:today\r\n    }));\r\n\r\n    // Compare and update tabDatafinal\r\n    tabData.forEach(currentTab => {\r\n      const existingTab = tabDatafinal.find(tab => tab.tabid === currentTab.tabid);\r\n\r\n      if (!existingTab && currentTab.favIconUrl) {\r\n        // If tab with this ID doesn't exist in tabDatafinal, add it\r\n        tabDatafinal.push(currentTab);\r\n      } else if (existingTab &&currentTab.url && existingTab.title && existingTab.url&& currentTab.title && (existingTab.title !== currentTab.title || existingTab.url !== currentTab.url)) {\r\n        // If tab with this ID exists but title or URL has changed, update it\r\n        existingTab.title = currentTab.title;\r\n        existingTab.url = currentTab.url;\r\n      }\r\n    });\r\n    //console.log(limit);\r\n    if(countchanges>limit){\r\n      //tablen = tablen+5;\r\n      countchanges = 0;\r\n      limit = 5;\r\n      if (!debounceTimer) {\r\n        // Call getAllTabs immediately\r\n        sendTabsToBackend(tabDatafinal); \r\n        // Set a timer to block subsequent calls for 500ms\r\n        debounceTimer = setTimeout(() => {\r\n          debounceTimer = null; // Reset the timer after 500ms\r\n        }, 1700);\r\n      }\r\n      \r\n    }\r\n  });\r\n}\r\n\r\n// Send tabs data to your backend API\r\nfunction sendTabsToBackend(tabData) {\r\n   console.log(\"sendTabsToBackend\");\r\n   chrome.storage.local.get(['laststore'], (result)=>{\r\n    if(!result.laststore || (result.laststore && JSON.parse(result.laststore) != tabDatafinal )){\r\n      \r\n      try {\r\n        \r\n        var newtabs=[];\r\n        if(result.laststore){\r\n          var lasttabs = JSON.parse(result.laststore);\r\n          //console.log(result.laststore);\r\n          //console.log(lasttabs+\" \"+ lasttabs.length);\r\n        \r\n        //console.log(lasttabs[0]);\r\n        tabDatafinal.forEach(currentTab => {\r\n          // const existingTab = lasttabs.find(tab => (tab.tabid === currentTab.tabid || tab.title === currentTab.title || tab.favIconUrl === currentTab.favIconUrl || tab.url === currentTab.url));\r\n          const existingTab2 = lasttabs.find(tab => \r\n            tab.tabid === currentTab.tabid);\r\n            const existingTab1 = lasttabs.find(tab => \r\n            tab.url === currentTab.url);\r\n            //console.log(currentTab.url);\r\n            \r\n            var existingTab = null;\r\n            if(existingTab2){\r\n              existingTab = existingTab2;\r\n            }else{\r\n              console.log(\"mil gya |||||||||||\");\r\n              existingTab = existingTab1;\r\n            }\r\n\r\n          if (!existingTab && currentTab.favIconUrl ) {\r\n            // If tab with this ID doesn't exist in tabDatafinal, add it\r\n            newtabs.push(currentTab);\r\n            console.log(\"adding tab \"+ currentTab.title+ \" \"+currentTab.tabid);\r\n          } else if (existingTab &&currentTab.url && existingTab.title && existingTab.url&& currentTab.title &&  existingTab.url !== currentTab.url) {\r\n            // If tab with this ID exists but title or URL has changed, update it\r\n            const t1 = existingTab.url.split('.');\r\n            const t2 = currentTab.url.split('.');\r\n            if(t1[0]!=t2[0] || t1[1]!=t2[1] ){\r\n              console.log(t1,\"and\",t2)\r\n              newtabs.push(currentTab);\r\n              console.log(\"adding tab broo\"+ currentTab.title+ \" \"+currentTab.tabid+\" \"+currentTab.url+\" \"+currentTab.favIconUrl);\r\n            }else{\r\n              existingTab.title = currentTab.title;\r\n            }\r\n            \r\n          }\r\n        });\r\n        }else{\r\n          newtabs = tabDatafinal;\r\n          console.log(\"else here\")\r\n        }\r\n        var token;\r\n        chrome.storage.local.get(['token69'], (result) => {\r\n          if(result.token69 && newtabs.length>0){\r\n            token = result.token69\r\n            console.log(token+ \"           CALLING BACKENDDDDDD\") \r\n            chrome.storage.local.set({ 'laststore': JSON.stringify(tabDatafinal) }, () => {\r\n                    console.log('Token received and stored in background.');\r\n                  });  \r\n            fetch('https://extensionbackend.hamdidcarel.workers.dev/savetabs', {\r\n              method: 'POST',\r\n              headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ tabs: newtabs }),\r\n            })\r\n              .then(response => response.json())\r\n              .then(data => {\r\n                console.log('Tabs successfully stored in the backend:', data);\r\n                chrome.storage.local.set({ 'laststore': JSON.stringify(tabDatafinal) }, () => {\r\n                  console.log('Token received and stored in background.');\r\n                });\r\n              })\r\n              .catch(error => {\r\n                console.error('Error storing tabs in the backend:', error);\r\n              });\r\n          }\r\n        });\r\n  \r\n      \r\n        \r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n   })\r\n    \r\n      \r\n    \r\n}\r\n\r\n// Listen for extension installation or manual trigger to fetch all tabs\r\nchrome.runtime.onInstalled.addListener(() => {\r\n  //getAllTabs(); \r\n});\r\n\r\n// Trigger fetching tabs on the extension icon click\r\nchrome.action.onClicked.addListener((tab) => {\r\n  getAllTabs();\r\n});\r\n\r\n// Listen for new tabs being created\r\nchrome.tabs.onCreated.addListener((tab) => {\r\n  //getAllTabs();\r\n});\r\n\r\nfunction getTabData(tabId) {\r\n  chrome.tabs.get(tabId, (tab) => {\r\n    if (tab) {\r\n      const tabData = {\r\n        url: tab.url,\r\n        title: tab.title,\r\n        id: tab.id,\r\n        favIconUrl: tab.favIconUrl,\r\n      };\r\n      // Send the updated tab data to the backend or process it\r\n      sendTabsToBackend([tabData]);\r\n    }\r\n  });\r\n}\r\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\r\n  console.log(\"updatessssssssssssssssssssssssssssssssssss\")\r\n//   console.log(tab.title+\" \"+ tab.url+\" \"+tab.id+\" \"+tabId);\r\n getAllTabs();\r\n\r\n});\r\n\r\n\r\nchrome.tabs.onRemoved.addListener((tab) => {\r\n    const tabId = tab;\r\n    const existingTab = tabDatafinal.find(tab => tab.id === tabId);\r\n    \r\n    if (!existingTab) {\r\n      \r\n    } else{\r\n      // If tab with this ID exists but title or URL has changed, update it\r\n      existingTab.type = 3;\r\n    }\r\n  \r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n// chrome.runtime.onSuspend.addListener(() => {\r\n//   getAllTabs();\r\n  \r\n// });\r\n\r\n\r\n"],"names":[],"sourceRoot":""}